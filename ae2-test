local mon = peripheral.find("monitor")
local me = peripheral.find("me_bridge")

if not mon then error("Kein Monitor gefunden!") end
if not me then error("Keine ME-Bridge gefunden!") end

local busyJobs = {} -- speichert Busy CPUs für Button Interaktion

-- Funktion zum Formatieren großer Zahlen mit K, M, G
local function formatBytes(bytes)
    if bytes >= 1000000000 then
        return string.format("%.2fG", bytes / 1000000000)
    elseif bytes >= 1000000 then
        return string.format("%.2fM", bytes / 1000000)
    elseif bytes >= 1000 then
        return string.format("%.2fK", bytes / 1000)
    else
        return tostring(bytes)
    end
end

-- Text zentriert auf dem Monitor schreiben
local function writeCentered(text, y, color)
    local w, h = mon.getSize()
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, y)
    if color then mon.setTextColor(color) end
    mon.write(text)
    mon.setTextColor(colors.white)
end

local function prepareMonitor()
    mon.clear()
    mon.setTextScale(1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
end

local function clearMonitor()
    local w, h = mon.getSize()
    for y=1,h do
        mon.setCursorPos(1,y)
        mon.clearLine()
    end
end

-- Zeigt die CPUs und erstellt die Busy Jobs Tabelle für Buttons
local function displayCPUs()
    clearMonitor()
    busyJobs = {} -- neu befüllen

    local y = 1
    writeCentered("AE2 Crafting Usage Monitor", y)
    y = y + 2

    local cpus = me.getCraftingCPUs()
    if not cpus or #cpus == 0 then
        writeCentered("Keine Crafting CPUs gefunden.", y)
        return
    end

    table.sort(cpus, function(a, b)
        return (a.isBusy == false and b.isBusy == true)
    end)

    for i, cpu in ipairs(cpus) do
        -- CPU Nummer
        writeCentered("CPU " .. i, y)
        y = y + 1

        -- Status Zeile
        local statusText = cpu.isBusy and "Busy" or "Ready"
        local statusColor = cpu.isBusy and colors.red or colors.green
        local line
        if cpu.isBusy then
            line = string.format("%s | Storage: %s",
                statusText, formatBytes(cpu.storage)
            )
        else
            line = string.format("%s | Storage: %s | CoProc: %d",
                statusText, formatBytes(cpu.storage), cpu.coProcessors
            )
        end
        local statusLength = #statusText
        local w, _ = mon.getSize()
        local x = math.floor((w - #line) / 2) + 1

        mon.setCursorPos(x, y)
        mon.setTextColor(statusColor)
        mon.write(statusText)
        mon.setTextColor(colors.white)
        mon.write(string.sub(line, statusLength + 1))
        y = y + 1

        -- Itemname
        if cpu.isBusy and cpu.craftingJob and cpu.craftingJob.resource then
            local fullName = cpu.craftingJob.resource.name or "Unknown"
            local itemName = fullName:match(":(.+)$") or fullName
            itemName = itemName:gsub("^%l", string.upper)
            writeCentered("Item: " .. itemName, y, colors.yellow)
            y = y + 1

            -- Quantity und Completion %
            local qty = cpu.craftingJob.quantity or 0
            local comp = cpu.craftingJob.completion or 0
            writeCentered(string.format("Quantity: %d | Completion: %.0f%%", qty, comp*100), y)
            y = y + 1

            -- Cancel Button zentriert
            writeCentered("[ CANCEL ]", y, colors.red)
            -- Speichere Busy Job für Button-Interaktion
            table.insert(busyJobs, {job = cpu.craftingJob, y = y})
            y = y + 2
        else
            y = y + 1
        end

        if y > select(2, mon.getSize()) then break end
    end
end

-- Event-Loop für Touch-Interaktion
local function handleTouch()
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")
        for _, entry in ipairs(busyJobs) do
            if y == entry.y then
                local ok = entry.job:cancel()
                if ok then
                    writeCentered("Job canceled!", y, colors.green)
                else
                    writeCentered("Cancel failed!", y, colors.red)
                end
            end
        end
    end
end

prepareMonitor()
-- Paralleler Event-Loop
parallel.waitForAny(
    function()
        while true do
            displayCPUs()
            sleep(2)
        end
    end,
    handleTouch
)

-- ME Crafting Jobs Monitor (sichere Version)
local mon = peripheral.find("monitor")
local me = peripheral.find("me_bridge")

if not mon then
    error("Kein Monitor gefunden!")
end
if not me then
    error("Keine ME-Bridge gefunden!")
end

-- Monitor vorbereiten
local function prepareMonitor()
    mon.clear()
    local w, h = mon.getSize()
    mon.setCursorPos(1,1)
    mon.setTextScale(1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
    mon.write("ME Crafting Jobs Dashboard")
end

-- Monitor leeren für neue Daten
local function clearMonitor()
    local w, h = mon.getSize()
    for y = 2, h do
        mon.setCursorPos(1,y)
        mon.clearLine()
    end
end

-- Alle aktiven Jobs auf Monitor schreiben
local function displayJobs()
    clearMonitor()
    local success, jobs = pcall(function() return me.listCraftingJobs() end)

    local y = 2
    if not success or not jobs or #jobs == 0 then
        mon.setCursorPos(1, y)
        mon.write("Crafting Jobs: 0")
        return
    end

    mon.setCursorPos(1,y)
    mon.write("Crafting Jobs: " .. #jobs)
    y = y + 1

    for i, job in ipairs(jobs) do
        local detail, err = me.getCraftingJob(job.id)
        if detail then
            mon.setCursorPos(1,y)
            mon.write(string.format("ID: %s | Item: %s | Menge: %d | Status: %s", 
                detail.id, detail.item or "Unknown", detail.amount or 0, detail.status or "Unknown"))
            y = y + 1
        else
            mon.setCursorPos(1,y)
            mon.write("Fehler beim Abrufen von Job ID " .. job.id .. ": " .. err)
            y = y + 1
        end
        if y > select(2, mon.getSize()) then break end -- Monitor nicht überlaufen
    end
end

-- Hauptloop
prepareMonitor()
while true do
    displayJobs()
    sleep(2) -- alle 2 Sekunden aktualisieren
end

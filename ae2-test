-- Cancel Button zentriert mit Koordinaten
local function displayCPUs()
    clearMonitor()
    busyJobs = {}

    local y = 1
    writeCentered("AE2 Crafting Usage Monitor", y)
    y = y + 2

    local cpus = me.getCraftingCPUs()
    if not cpus or #cpus == 0 then
        writeCentered("Keine Crafting CPUs gefunden.", y)
        return
    end

    table.sort(cpus, function(a, b)
        return (a.isBusy == false and b.isBusy == true)
    end)

    for i, cpu in ipairs(cpus) do
        writeCentered("CPU " .. i, y)
        y = y + 1

        local statusText = cpu.isBusy and "Busy" or "Ready"
        local statusColor = cpu.isBusy and colors.red or colors.green
        local line
        if cpu.isBusy then
            line = string.format("%s | Storage: %s", statusText, formatBytes(cpu.storage))
        else
            line = string.format("%s | Storage: %s | CoProc: %d", statusText, formatBytes(cpu.storage), cpu.coProcessors)
        end
        local statusLength = #statusText
        local w, _ = mon.getSize()
        local x = math.floor((w - #line) / 2) + 1
        mon.setCursorPos(x, y)
        mon.setTextColor(statusColor)
        mon.write(statusText)
        mon.setTextColor(colors.white)
        mon.write(string.sub(line, statusLength + 1))
        y = y + 1

        if cpu.isBusy and cpu.craftingJob and cpu.craftingJob.resource then
            local fullName = cpu.craftingJob.resource.name or "Unknown"
            local itemName = fullName:match(":(.+)$") or fullName
            itemName = itemName:gsub("^%l", string.upper)
            writeCentered("Item: " .. itemName, y, colors.yellow)
            y = y + 1

            local qty = cpu.craftingJob.quantity or 0
            local comp = cpu.craftingJob.completion or 0
            writeCentered(string.format("Quantity: %d | Completion: %.0f%%", qty, comp*100), y)
            y = y + 1

            -- Cancel Button
            local buttonText = "[ CANCEL ]"
            local buttonX = math.floor((w - #buttonText) / 2) + 1
            mon.setCursorPos(buttonX, y)
            mon.setTextColor(colors.red)
            mon.write(buttonText)
            mon.setTextColor(colors.white)

            -- Busy Job mit Button Koordinaten speichern
            table.insert(busyJobs, {
                job = cpu.craftingJob,
                y = y,
                xStart = buttonX,
                xEnd = buttonX + #buttonText - 1
            })
            y = y + 2
        else
            y = y + 1
        end

        if y > select(2, mon.getSize()) then break end
    end
end

-- Event Loop fÃ¼r Touch
local function handleTouch()
    while true do
        local event, side, x, y = os.pullEvent("monitor_touch")
        for _, entry in ipairs(busyJobs) do
            if y == entry.y and x >= entry.xStart and x <= entry.xEnd then
                local ok = entry.job:cancel()
                if ok then
                    writeCentered("Job canceled!", y, colors.green)
                else
                    writeCentered("Cancel failed!", y, colors.red)
                end
            end
        end
    end
end

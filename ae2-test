local mon = peripheral.find("monitor")
local me = peripheral.find("meBridge")

if not mon then error("Kein Monitor gefunden!") end
if not me then error("Keine ME-Bridge gefunden!") end

-- Funktion zum Formatieren groÃŸer Zahlen
local function formatBytes(bytes)
    if bytes >= 1000000 then
        return string.format("%.1fM", bytes / 1000000)
    elseif bytes >= 1000 then
        return string.format("%.1fK", bytes / 1000)
    else
        return tostring(bytes)
    end
end

local function prepareMonitor()
    mon.clear()
    local w, h = mon.getSize()
    mon.setCursorPos(1,1)
    mon.setTextScale(1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
    mon.write("AE2 Crafting CPU Dashboard")
end

local function clearMonitor()
    local w, h = mon.getSize()
    for y=2,h do
        mon.setCursorPos(1,y)
        mon.clearLine()
    end
end

local function displayCPUs()
    clearMonitor()
    local cpus = me.getCraftingCPUs()
    local y = 2

    if not cpus or #cpus == 0 then
        mon.setCursorPos(1,y)
        mon.write("Keine Crafting CPUs gefunden.")
        return
    end

    for i, cpu in ipairs(cpus) do
        mon.setCursorPos(1,y)
        local jobText = "None"
        if cpu.craftingJob then
            jobText = string.format("ID:%s Item:%s Amt:%d Status:%s", 
                cpu.craftingJob.id, cpu.craftingJob.item or "Unknown", cpu.craftingJob.amount or 0, cpu.craftingJob.status or "Unknown")
        end
        mon.write(string.format(
            "CPU %d (%s) | Busy: %s | Storage: %s | CoProc: %d | Job: %s", 
            i, cpu.name or "Unnamed", tostring(cpu.isBusy), formatBytes(cpu.storage), cpu.coProcessors, jobText
        ))
        y = y + 1
        if y > select(2, mon.getSize()) then break end
    end
end

prepareMonitor()
while true do
    displayCPUs()
    sleep(2)
end

local mon = peripheral.find("monitor")
local me = peripheral.find("me_bridge")

if not mon then error("Kein Monitor gefunden!") end
if not me then error("Keine ME-Bridge gefunden!") end

-- Funktion zum Formatieren großer Zahlen mit K, M, G
local function formatBytes(bytes)
    if bytes >= 1000000000 then
        return string.format("%.2fG", bytes / 1000000000)
    elseif bytes >= 1000000 then
        return string.format("%.2fM", bytes / 1000000)
    elseif bytes >= 1000 then
        return string.format("%.2fK", bytes / 1000)
    else
        return tostring(bytes)
    end
end

-- Funktion, um Text horizontal zu zentrieren
local function writeCentered(text, y)
    local w, h = mon.getSize()
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, y)
    mon.write(text)
end

local function prepareMonitor()
    mon.clear()
    mon.setTextScale(1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
end

local function clearMonitor()
    local w, h = mon.getSize()
    for y=1,h do
        mon.setCursorPos(1,y)
        mon.clearLine()
    end
end

local function displayCPUs()
    clearMonitor()

    local y = 1
    -- Überschrift
    writeCentered("AE2 Crafting Usage Monitor", y)
    y = y + 2

    local cpus = me.getCraftingCPUs()
    if not cpus or #cpus == 0 then
        writeCentered("Keine Crafting CPUs gefunden.", y)
        return
    end

    -- CPUs nach Busy Status sortieren: zuerst nicht busy, dann busy
    local sorted = {}
    for _, cpu in ipairs(cpus) do
        table.insert(sorted, cpu)
    end
    table.sort(sorted, function(a, b)
        return (a.isBusy == false and b.isBusy == true)
    end)

    for _, cpu in ipairs(sorted) do
        -- Erste Zeile: CPU Nummer
        writeCentered("CPU " .. _ , y)
        y = y + 1

        -- Zweite Zeile: Busy, Storage, CoProc
        local line = string.format("Busy: %s | Storage: %s | CoProc: %d",
            tostring(cpu.isBusy), formatBytes(cpu.storage), cpu.coProcessors
        )
        writeCentered(line, y)
        y = y + 2 -- Leerzeile zwischen CPUs

        if y > select(2, mon.getSize()) then break end
    end
end

prepareMonitor()
while true do
    displayCPUs()
    sleep(2)
end

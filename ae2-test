local mon = peripheral.find("monitor")
local me = peripheral.find("me_bridge")

if not mon then error("Kein Monitor gefunden!") end
if not me then error("Keine ME-Bridge gefunden!") end

-- Funktion zum Formatieren großer Zahlen mit K, M, G
local function formatBytes(bytes)
    if bytes >= 1000000000 then
        return string.format("%.2fG", bytes / 1000000000)
    elseif bytes >= 1000000 then
        return string.format("%.2fM", bytes / 1000000)
    elseif bytes >= 1000 then
        return string.format("%.2fK", bytes / 1000)
    else
        return tostring(bytes)
    end
end

-- Text zentriert auf dem Monitor schreiben
local function writeCentered(text, y, color, scale)
    local w, h = mon.getSize()
    if scale then mon.setTextScale(scale) end
    local x = math.floor((w - #text) / 2) + 1
    mon.setCursorPos(x, y)
    if color then mon.setTextColor(color) end
    mon.write(text)
    mon.setTextColor(colors.white)
    if scale then mon.setTextScale(1) end
end

local function prepareMonitor()
    mon.clear()
    mon.setTextScale(1)
    mon.setBackgroundColor(colors.black)
    mon.setTextColor(colors.white)
end

local function clearMonitor()
    local w, h = mon.getSize()
    for y=1,h do
        mon.setCursorPos(1,y)
        mon.clearLine()
    end
end

local function capitalize(str)
    return str:sub(1,1):upper() .. str:sub(2)
end

local function displayCPUs()
    clearMonitor()

    local y = 1
    -- Überschrift
    writeCentered("AE2 Crafting Usage Monitor", y)
    y = y + 2

    local cpus = me.getCraftingCPUs()
    if not cpus or #cpus == 0 then
        writeCentered("Keine Crafting CPUs gefunden.", y)
        return
    end

    -- CPUs sortieren: Ready zuerst, Busy nach Completion %
    local readyCPUs = {}
    local busyCPUs = {}

    for _, cpu in ipairs(cpus) do
        if cpu.isBusy then
            table.insert(busyCPUs, cpu)
        else
            table.insert(readyCPUs, cpu)
        end
    end

    -- Busy nach Completion sortieren (höchste zuerst)
    table.sort(busyCPUs, function(a, b)
        local aComp = a.craftingJob and a.craftingJob.completion or 0
        local bComp = b.craftingJob and b.craftingJob.completion or 0
        return aComp > bComp
    end)

    local sortedCPUs = {}
    for _, cpu in ipairs(readyCPUs) do table.insert(sortedCPUs, cpu) end
    for _, cpu in ipairs(busyCPUs) do table.insert(sortedCPUs, cpu) end

    for i, cpu in ipairs(sortedCPUs) do
        -- Erste Zeile: CPU Nummer größer
        writeCentered("CPU " .. i, y, colors.white, 1.5)
        y = y + 2

        -- Zweite Zeile: Status farbig + Storage/CoProc (nur bei Ready)
        local statusText = cpu.isBusy and "Busy" or "Ready"
        local statusColor = cpu.isBusy and colors.red or colors.green
        local line
        if cpu.isBusy then
            line = string.format("%s | Storage: %s",
                statusText, formatBytes(cpu.storage)
            )
        else
            line = string.format("%s | Storage: %s | CoProc: %d",
                statusText, formatBytes(cpu.storage), cpu.coProcessors
            )
        end

        local statusLength = #statusText
        local w, _ = mon.getSize()
        local x = math.floor((w - #line) / 2) + 1

        mon.setCursorPos(x, y)
        mon.setTextColor(statusColor)
        mon.write(statusText)
        mon.setTextColor(colors.white)
        mon.write(string.sub(line, statusLength + 1))
        y = y + 1

        -- Dritte Zeile: Item + Quantity + Completion %, nur für Busy
        if cpu.isBusy and cpu.craftingJob and cpu.craftingJob.resource then
            local fullName = cpu.craftingJob.resource.name or "Unknown"
            local itemName = capitalize(fullName:match(":(.+)$") or fullName)
            local qty = cpu.craftingJob.quantity or 0
            local comp = cpu.craftingJob.completion or 0
            local itemLine = string.format("Item: %s | Quantity: %d | Completion: %.0f%%", itemName, qty, comp * 100)
            writeCentered(itemLine, y, colors.yellow)
            y = y + 2
        else
            y = y + 1 -- Leerzeile zwischen CPUs
        end

        if y > select(2, mon.getSize()) then break end
    end
end

prepareMonitor()
while true do
    displayCPUs()
    sleep(2)
end

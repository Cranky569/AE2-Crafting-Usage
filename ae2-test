-- Funktion, um genutzte, maximale, freie Typen und Anzahl der Item-Cells zu bekommen
function getItemTypes()
    local used, max, free, cellCount = 0, 0, 0, 0
    local bridge = peripheral.find("me_bridge")
    if bridge then
        local items = bridge.getItems() or {}
        used = #items

        local cells = bridge.getCells() or {}
        for _, cell in pairs(cells) do
            if cell.isItem then
                max = max + 63
                cellCount = cellCount + 1
            end
        end
    end
    free = max - used
    return used, max, free, cellCount
end

-- Funktion, um genutzte, maximale, freie Typen und Anzahl der Fluid-Cells zu bekommen
function getFluidTypes()
    local used, max, free, cellCount = 0, 0, 0, 0
    local bridge = peripheral.find("me_bridge")
    if bridge then
        local fluids = bridge.getFluids() or {}
        used = #fluids

        local cells = bridge.getCells() or {}
        for _, cell in pairs(cells) do
            if cell.isFluid then
                max = max + 18
                cellCount = cellCount + 1
            end
        end
    end
    free = max - used
    return used, max, free, cellCount
end

-- Funktion, um genutzte, maximale, freie Typen und Anzahl der Chemical-Cells zu bekommen
function getChemicalTypes()
    local used, max, free, cellCount = 0, 0, 0, 0
    local bridge = peripheral.find("me_bridge")
    if bridge then
        local chems = bridge.getChemicals() or {}
        used = #chems

        local cells = bridge.getCells() or {}
        for _, cell in pairs(cells) do
            if cell.isChemical then
                max = max + 5
                cellCount = cellCount + 1
            end
        end
    end
    free = max - used
    return used, max, free, cellCount
end

-- Funktion zum Zentrieren von Text auf dem Monitor
function centerText(monitor, text, line)
    local w, _ = monitor.getSize()
    local x = math.floor((w - #text) / 2)
    monitor.setCursorPos(x, line)
    monitor.write(text)
end

-- Hauptprogramm
function updateDisplay()
    local monitor = peripheral.find("monitor")
    if not monitor then
        print("Kein Monitor gefunden.")
        return
    end

    monitor.setTextScale(1)
    monitor.clear()

    while true do
        monitor.clear()

        -- Items
        local usedItems, maxItems, freeItems, itemCells = getItemTypes()
        local percentUsedItems = (maxItems > 0) and ((usedItems / maxItems) * 100) or 0
        local percentFreeItems = 100 - percentUsedItems
        monitor.setTextColor(colors.yellow)
        centerText(monitor, "Item Types", 1)
        centerText(monitor, string.format("Used: %d | Free: %d | Cells: %d", usedItems, freeItems, itemCells), 2)
        centerText(monitor, string.format("%.1f%% Used | %.1f%% Free", percentUsedItems, percentFreeItems), 3)

        -- Fluids
        local usedFluids, maxFluids, freeFluids, fluidCells = getFluidTypes()
        local percentUsedFluids = (maxFluids > 0) and ((usedFluids / maxFluids) * 100) or 0
        local percentFreeFluids = 100 - percentUsedFluids
        monitor.setTextColor(colors.cyan)
        centerText(monitor, "Fluid Types", 5)
        centerText(monitor, string.format("Used: %d | Free: %d | Cells: %d", usedFluids, freeFluids, fluidCells), 6)
        centerText(monitor, string.format("%.1f%% Used | %.1f%% Free", percentUsedFluids, percentFreeFluids), 7)

        -- Chemicals
        local usedChems, maxChems, freeChems, chemCells = getChemicalTypes()
        local percentUsedChems = (maxChems > 0) and ((usedChems / maxChems) * 100) or 0
        local percentFreeChems = 100 - percentUsedChems
        monitor.setTextColor(colors.purple)
        centerText(monitor, "Chemical Types", 9)
        centerText(monitor, string.format("Used: %d | Free: %d | Cells: %d", usedChems, freeChems, chemCells), 10)
        centerText(monitor, string.format("%.1f%% Used | %.1f%% Free", percentUsedChems, percentFreeChems), 11)

        sleep(5)
    end
end

-- Start
updateDisplay()
